function [X_hat_lms_kf] = perform_newtest250815_time_iter(X_hat_lms_kf, K_iter_lms, X_hat_lms_kf_old_reg, ...
                             mu_lms_kf, alpha_lms_kf_T, alpha_lms_kf, MATRIXinv, Q, Y, d_factor, H_CCD, H_blur, H_reg, flag_convolution, flag_imfilter, flag_imfilter_reg)
% -------------------------------------------------------------------------
% Performs one time iteration of the new  algorithm with exact temporal
% regularization on the iterative optimization problem
% 
% The matrix MATRIXinv is given by (I - 1/alphaT * Q'Q)^-1
% 
% INPUT: 
% 
% 
% 
% OUTPUT:
% 
% Ricardo Borsoi
% 25/08/2015
% -------------------------------------------------------------------------

% Test of code minimizing perturbation at each gradient descent iteration

% Choose wavedlet for decomposition
% GOOD: sym4, dmey, db10, bior68, db45
% AVERAGE: coif1, sym2, 
% NOT WORK: haar, sym1, bior1.1


% 
if max(size(MATRIXinv)) <= length(X_hat_lms_kf)
    flag_convolutoinal_Q = true;
else
    flag_convolutoinal_Q = false;
end



% Get the HR image size (assumed square)
hr_side = length(X_hat_lms_kf);


% LMS KF algorithm --------------------------------------------------------
for k = 1:K_iter_lms
    
    
    
    %----------------------------------------------------------------------
    % R-LMS Lagrangian
    %----------------------------------------------------------------------
    if flag_convolution
        Temp_lms_kf = imfilter(X_hat_lms_kf, H_blur, flag_imfilter, 'same');
        Temp_lms_kf = imfilter(Temp_lms_kf,  H_CCD, flag_imfilter, 'same');
    else
        Temp_lms_kf = convolve2(X_hat_lms_kf, H_blur, flag_imfilter);
        Temp_lms_kf = convolve2(Temp_lms_kf,  H_CCD, flag_imfilter);
    end
    Dx_hat_lms_kf = Temp_lms_kf(1:d_factor:hr_side, 1:d_factor:hr_side);

    error_lms_kf = - (Y - Dx_hat_lms_kf);

    DtError_lms_kf = zeros(hr_side, hr_side);
    DtError_lms_kf(1:d_factor:hr_side, 1:d_factor:hr_side) = error_lms_kf;
    if flag_convolution
        DtError_lms_kf = imfilter(DtError_lms_kf(hr_side:-1:1, hr_side:-1:1), H_CCD, flag_imfilter, 'same');
        DtError_lms_kf = imfilter(DtError_lms_kf, H_blur, flag_imfilter, 'same');
    else
        DtError_lms_kf = convolve2(DtError_lms_kf(hr_side:-1:1, hr_side:-1:1), H_CCD, flag_imfilter);
        DtError_lms_kf = convolve2(DtError_lms_kf, H_blur, flag_imfilter);
    end
    DtError_lms_kf = DtError_lms_kf(hr_side:-1:1, hr_side:-1:1);

%     DtError_lms_kf = DtError_lms_kf;

    
    % Thikhonov regularization
    if flag_convolution
        regul_lms_kf_tknv = imfilter(X_hat_lms_kf, H_reg, flag_imfilter_reg, 'same');
        regul_lms_kf_tknv = imfilter(regul_lms_kf_tknv(hr_side:-1:1, hr_side:-1:1), H_reg, flag_imfilter_reg, 'same');
    else
        regul_lms_kf_tknv = convolve2(X_hat_lms_kf, H_reg, flag_imfilter_reg);
        regul_lms_kf_tknv = convolve2(regul_lms_kf_tknv(hr_side:-1:1, hr_side:-1:1), H_reg, flag_imfilter_reg);
    end
    regul_lms_kf_tknv = regul_lms_kf_tknv(hr_side:-1:1, hr_side:-1:1);
    
%     regul_lms_kf = regul_lms_kf + alpha_lms_kf*regul_lms_kf_tknv;
	lagrangian_r_lms = 2 * DtError_lms_kf + 2 * alpha_lms_kf*regul_lms_kf_tknv;
	
    
    
	%----------------------------------------------------------------------
    % 1/alphaT * Q'Q G(t) xh(t-1)
    %----------------------------------------------------------------------
% %     if flag_convolution
% %         regul_lms_kf_t = imfilter(X_hat_lms_kf_old_reg, H_reg, flag_imfilter_reg, 'same');
% %         regul_lms_kf_t = imfilter(regul_lms_kf_t(hr_side:-1:1, hr_side:-1:1), H_reg, flag_imfilter_reg, 'same');
% %     else
% %         regul_lms_kf_t = convolve2(X_hat_lms_kf_old_reg, H_reg, flag_imfilter_reg);
% %         regul_lms_kf_t = convolve2(regul_lms_kf_t(hr_side:-1:1, hr_side:-1:1), H_reg, flag_imfilter_reg);
% %     end
% %     regul_lms_kf_t = (1/alpha_lms_kf_T) * regul_lms_kf_t(hr_side:-1:1, hr_side:-1:1);
    


    
%     regul_lms_kf_t = ilexico(    * (Q'*Q) * lexico(X_hat_lms_kf_old_reg),   hr_side, hr_side);
%     if flag_convolutoinal_Q == false
        regul_lms_kf_t = (1/alpha_lms_kf_T) * reshape( (Q'*(Q*lexico(X_hat_lms_kf_old_reg))), hr_side, hr_side)';
%     else
% %         disp('sss')
%         regul_lms_kf_t = imfilter(X_hat_lms_kf_old_reg, Q, flag_imfilter_reg, 'same');
%         regul_lms_kf_t = imfilter(regul_lms_kf_t(hr_side:-1:1, hr_side:-1:1), Q, flag_imfilter_reg, 'same');
%         regul_lms_kf_t = (1/alpha_lms_kf_T) * regul_lms_kf_t;
%     end


% %         regul_lms_kf_t = imfilter(X_hat_lms_kf_old_reg, H_reg, flag_imfilter_reg, 'same');
% %         regul_lms_kf_t = imfilter(regul_lms_kf_t(hr_side:-1:1, hr_side:-1:1), H_reg, flag_imfilter_reg, 'same');

    
	%----------------------------------------------------------------------
    % (I + 1/alphaT * Q'Q )^-1 * ( xk(t) + 1/alphaT * Q'Q G(t)xh(t-1) - mu * Nabla Lr-ms(xk(t)) )
    %----------------------------------------------------------------------
    
    
    Temp = X_hat_lms_kf + regul_lms_kf_t - mu_lms_kf .* lagrangian_r_lms;
    
    
% % %     Temp = MATRIXinv * lexico(Temp);
% % %     X_hat_lms_kf = ilexico(Temp, hr_side, hr_side);
    
    
    if flag_convolutoinal_Q == false
        Temp         = MATRIXinv * lexico(Temp);
        X_hat_lms_kf = ilexico(Temp, hr_side, hr_side);
    else
        X_hat_lms_kf = imfilter(Temp, MATRIXinv, flag_imfilter_reg, 'same');
    end
    
end














