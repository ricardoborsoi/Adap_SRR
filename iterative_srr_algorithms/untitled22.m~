% Function/class to load video files

%
% IN:    vid_path - Path to the video folders



classdef real_video_sequences_loader < handle
% -------------------------------------------------------------------------
% 
% 
% 
% 
% Ricardo Borsoi
% 16/12/2016
% -------------------------------------------------------------------------

    properties
        
        % Data about the video files available and to be processed
        vids
        vids_selected
        
        %
        vidreader_instance
        
        vid_path
        
    end
    
    
    
    
% % % % % % %     if ispc
    
    
    methods
        
        %------------------------------------------------------------------
        function [num_runs_new] = check_files_and_params(self, parent)
            % Extracts file names from the directory and select those with
            % mkv extensions
            temp_fnames = dir(vid_path);
            j = 1;
            for i=1:length(temp_fnames)
                extension = temp_fnames(i).name(end-2:end);

                if strcmp(extension,'mkv')
                    self.vids{j}.name = temp_fnames.name;
                    if ispc
                        self.vids{j}.full_vid_path = strcat(vid_path, '\', temp_fnames.name);
                    else
                        self.vids{j}.full_vid_path = strcat(vid_path, '/', temp_fnames.name);
                    end
                    j = j+1;
                end
            end
            
            % Check the size of the images and the number of frames
            for i=1:length(self.vids)
                v = VideoReader( self.vids{i}.full_vid_path );
                self.vids{i}.size = [v.Heigth v.Width];
                self.vids{i}.n_frames = v.NumberOfFrames;
            end
            
            % Check if videos comply to requirements and only select those which do
            j = 1;
            self.vids_selected = [];
            for i=1:length(self.vids)
                % Check for size of frames
                if min( self.vids{i}.size ) < parent.hr_side
                    % Check for length of sequences
                    if self.vids{i}.n_frames < parent.n_frames
                        self.vids_selected{j} = self.vids{i};
                        j = j + 1;
                    end
                end
            end
            
            % Check if variable was created
            if sum(size(self.vids_selected)) == 0 % if exist(self.vids_selected) ~= 1
                % Return flag or something
                error('Error.\n No videos were loaded!')
            end
            
            % Return the # of OK videos to the parent class
            % to setup the # of MC runs evaluated
            num_runs_new = length(self.vids_selected);
        end
        
        
        
        %------------------------------------------------------------------
        % Opens video file for the i-th MC run
        function [] = open_video_file(self, vid_idx)
            self.vidreader_instance = [];
            self.vidreader_instance = VideoReader( self.vids_selected{vid_idx}.full_vid_path );
        end
        
        
        
        %------------------------------------------------------------------
        % Load next frame for the current video file
        function [next_frame] = load_next_frame(self, parent)
            next_frame = readFrame(self.vidreader_instance);
            
            % Crop the image to the chosen size
            next_frame = next_frame(1:parent.hr_side, 1:parent.hr_side);
        end
        
        
    end
end











% Later print data (Nruns and Nframes)
% Create method to print
function verbose()
    disp('============================================')
    disp('=== Information for video processing ===')
    disp('Number of frames:')
    disp('Size of the images:')
    disp('Number of MC runs:')
    disp('============================================')
end



